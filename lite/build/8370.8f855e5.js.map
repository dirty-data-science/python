{"version":3,"file":"8370.8f855e5.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/repl-extension/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILabStatus,\n  IRouter,\n  JupyterFrontEndPlugin,\n  JupyterFrontEnd,\n  Router,\n} from '@jupyterlab/application';\n\nimport { CommandToolbarButton, IThemeManager, Toolbar } from '@jupyterlab/apputils';\n\nimport { IConsoleTracker } from '@jupyterlab/console';\n\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { clearIcon, refreshIcon, runIcon } from '@jupyterlab/ui-components';\n\nimport { SingleWidgetApp } from '@jupyterlite/application';\n\nimport { liteIcon } from '@jupyterlite/ui-components';\n\nimport { Widget } from '@lumino/widgets';\n\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n\n/**\n * A plugin to add buttons to the console toolbar.\n */\nconst buttons: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/console-application:buttons',\n  autoStart: true,\n  requires: [ITranslator],\n  optional: [IConsoleTracker],\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator,\n    tracker: IConsoleTracker | null\n  ) => {\n    if (!tracker) {\n      return;\n    }\n\n    const { commands } = app;\n    const trans = translator.load(I18N_BUNDLE);\n\n    // wrapper commands to be able to override the icon\n    const runCommand = 'repl:run';\n    commands.addCommand(runCommand, {\n      caption: trans.__('Run'),\n      icon: runIcon,\n      execute: () => {\n        return commands.execute('console:run-forced');\n      },\n    });\n\n    const runButton = new CommandToolbarButton({\n      commands,\n      id: runCommand,\n    });\n\n    const restartCommand = 'repl:restart';\n    commands.addCommand(restartCommand, {\n      caption: trans.__('Restart'),\n      icon: refreshIcon,\n      execute: () => {\n        return commands.execute('console:restart-kernel');\n      },\n    });\n\n    const restartButton = new CommandToolbarButton({\n      commands,\n      id: restartCommand,\n    });\n\n    const clearCommand = 'repl:clear';\n    commands.addCommand(clearCommand, {\n      caption: trans.__('Clear'),\n      icon: clearIcon,\n      execute: () => {\n        return commands.execute('console:clear');\n      },\n    });\n\n    const clearButton = new CommandToolbarButton({\n      commands,\n      id: clearCommand,\n    });\n\n    tracker.widgetAdded.connect((_, console) => {\n      const { toolbar } = console;\n\n      console.toolbar.addItem('run', runButton);\n      console.toolbar.addItem('restart', restartButton);\n      console.toolbar.addItem('clear', clearButton);\n\n      toolbar.addItem('spacer', Toolbar.createSpacerItem());\n\n      const node = document.createElement('a');\n      node.title = trans.__('Powered by JupyterLite');\n      node.href = 'https://github.com/jupyterlite/jupyterlite';\n      node.target = '_blank';\n      node.rel = 'noopener noreferrer';\n      const poweredBy = new Widget({ node });\n      liteIcon.element({\n        container: node,\n        elementPosition: 'center',\n        margin: '2px 2px 2px 8px',\n        height: 'auto',\n        width: '16px',\n      });\n\n      poweredBy.addClass('jp-PoweredBy');\n      toolbar.insertAfter('spacer', 'powered-by', poweredBy);\n    });\n  },\n};\n\n/**\n * A plugin to open a code console and\n * parse custom parameters from the query string arguments.\n */\nconst consolePlugin: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/repl-extension:console',\n  autoStart: true,\n  optional: [IConsoleTracker, IThemeManager],\n  activate: (\n    app: JupyterFrontEnd,\n    tracker: IConsoleTracker | null,\n    themeManager: IThemeManager | null\n  ) => {\n    if (!tracker) {\n      return;\n    }\n    const { commands, serviceManager, started } = app;\n\n    const search = window.location.search;\n    const urlParams = new URLSearchParams(search);\n    const code = urlParams.getAll('code');\n    const kernel = urlParams.get('kernel') || undefined;\n    const theme = urlParams.get('theme')?.trim();\n    const toolbar = urlParams.get('toolbar');\n\n    Promise.all([started, serviceManager.ready]).then(async () => {\n      commands.execute('console:create', { kernelPreference: { name: kernel } });\n    });\n\n    if (theme && themeManager) {\n      const themeName = decodeURIComponent(theme);\n      themeManager.setTheme(themeName);\n    }\n\n    tracker.widgetAdded.connect(async (_, widget) => {\n      const { console } = widget;\n\n      if (!toolbar) {\n        // hide the toolbar by default if not specified\n        widget.toolbar.dispose();\n      }\n\n      if (code) {\n        await console.sessionContext.ready;\n        code.forEach((line) => console.inject(line));\n      }\n    });\n  },\n};\n\n/**\n * The default JupyterLab application status provider.\n */\nconst status: JupyterFrontEndPlugin<ILabStatus> = {\n  id: '@jupyterlite/repl-extension:status',\n  autoStart: true,\n  provides: ILabStatus,\n  requires: [ITranslator],\n  activate: (app: JupyterFrontEnd, translator: ITranslator) => {\n    if (!(app instanceof SingleWidgetApp)) {\n      const trans = translator.load(I18N_BUNDLE);\n      throw new Error(trans.__('%1 must be activated in SingleWidgetApp.', status.id));\n    }\n    return app.status;\n  },\n};\n\n/**\n * The default paths for a single widget app.\n */\nconst paths: JupyterFrontEndPlugin<JupyterFrontEnd.IPaths> = {\n  id: '@jupyterlite/repl-extension:paths',\n  autoStart: true,\n  provides: JupyterFrontEnd.IPaths,\n  activate: (app: JupyterFrontEnd): JupyterFrontEnd.IPaths => {\n    if (!(app instanceof SingleWidgetApp)) {\n      throw new Error(`${paths.id} must be activated in SingleWidgetApp.`);\n    }\n    return app.paths;\n  },\n};\n\n/**\n * The default URL router provider.\n */\nconst router: JupyterFrontEndPlugin<IRouter> = {\n  id: '@jupyterlite/repl-extension:router',\n  autoStart: true,\n  provides: IRouter,\n  requires: [JupyterFrontEnd.IPaths],\n  activate: (app: JupyterFrontEnd, paths: JupyterFrontEnd.IPaths) => {\n    const { commands } = app;\n    const base = paths.urls.base;\n    const router = new Router({ base, commands });\n    void app.started.then(() => {\n      // Route the very first request on load.\n      void router.route();\n\n      // Route all pop state events.\n      window.addEventListener('popstate', () => {\n        void router.route();\n      });\n    });\n    return router;\n  },\n};\n\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  buttons,\n  consolePlugin,\n  paths,\n  router,\n  status,\n];\n\nexport default plugins;\n"],"names":["I18N_BUNDLE","buttons","id","autoStart","requires","ITranslator","optional","IConsoleTracker","activate","app","translator","tracker","commands","trans","load","runCommand","addCommand","caption","__","icon","runIcon","execute","runButton","CommandToolbarButton","restartCommand","refreshIcon","restartButton","clearCommand","clearIcon","clearButton","widgetAdded","connect","_","console","toolbar","addItem","Toolbar","node","document","createElement","title","href","target","rel","poweredBy","Widget","liteIcon","container","elementPosition","margin","height","width","addClass","insertAfter","consolePlugin","IThemeManager","themeManager","serviceManager","started","search","window","location","urlParams","URLSearchParams","code","getAll","kernel","get","undefined","theme","trim","Promise","all","ready","then","async","kernelPreference","name","themeName","decodeURIComponent","setTheme","widget","dispose","sessionContext","forEach","line","inject","status","provides","ILabStatus","SingleWidgetApp","Error","paths","JupyterFrontEnd","router","IRouter","base","urls","Router","route","addEventListener"],"sourceRoot":""}