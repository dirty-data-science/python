{"version":3,"file":"1125.129d070.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../src/awareness.ts","webpack://_JUPYTERLAB.CORE_OUTPUT/../src/mock.ts","webpack://_JUPYTERLAB.CORE_OUTPUT/../src/tokens.ts","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../src/yprovider.ts"],"sourcesContent":[null,null,null,"/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nexport const messageSync = 0\nexport const messageQueryAwareness = 3\nexport const messageAwareness = 1\nexport const messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (\n  encoder,\n  decoder,\n  provider,\n  emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(\n    decoder,\n    encoder,\n    provider.doc,\n    provider\n  )\n  if (\n    emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n    !provider.synced\n  ) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (\n  encoder,\n  _decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(\n    encoder,\n    awarenessProtocol.encodeAwarenessUpdate(\n      provider.awareness,\n      Array.from(provider.awareness.getStates().keys())\n    )\n  )\n}\n\nmessageHandlers[messageAwareness] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  awarenessProtocol.applyAwarenessUpdate(\n    provider.awareness,\n    decoding.readVarUint8Array(decoder),\n    provider\n  )\n}\n\nmessageHandlers[messageAuth] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  authProtocol.readAuthMessage(\n    decoder,\n    provider.doc,\n    (_ydoc, reason) => permissionDeniedHandler(provider, reason)\n  )\n}\n\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) =>\n  console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = (provider) => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = (event) => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onerror = (event) => {\n      provider.emit('connection-error', [event, provider])\n    }\n    websocket.onclose = (event) => {\n      provider.emit('connection-close', [event, provider])\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(\n          provider.awareness,\n          Array.from(provider.awareness.getStates().keys()).filter((client) =>\n            client !== provider.doc.clientID\n          ),\n          provider\n        )\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // using exponential backoff starting with 100ms\n      setTimeout(\n        setupWS,\n        math.min(\n          math.pow(2, provider.wsUnsuccessfulReconnects) * 100,\n          provider.maxBackoffTime\n        ),\n        provider\n      )\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(\n          encoderAwarenessState,\n          awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [\n            provider.doc.clientID\n          ])\n        )\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    bc.publish(provider.bcChannel, buf, provider)\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */\n  constructor (serverUrl, roomname, doc, {\n    connect = true,\n    awareness = new awarenessProtocol.Awareness(doc),\n    params = {},\n    WebSocketPolyfill = WebSocket,\n    resyncInterval = -1,\n    maxBackoffTime = 2500,\n    disableBc = false\n  } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.maxBackoffTime = maxBackoffTime\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname +\n      (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.disableBc = disableBc\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */\n    this._bcSubscriber = (data, origin) => {\n      if (origin !== this) {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder), this)\n        }\n      }\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} _origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, _origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoder,\n        awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients)\n      )\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._unloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(\n        this.awareness,\n        [doc.clientID],\n        'window unload'\n      )\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._unloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (\n        this.wsconnected &&\n        messageReconnectTimeout <\n          time.getUnixTime() - this.wsLastMessageReceived\n      ) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._unloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (this.disableBc) {\n      return\n    }\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync), this)\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderState), this)\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessQuery),\n      this\n    )\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoderAwarenessState,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ])\n    )\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessState),\n      this\n    )\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoder,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ], new Map())\n    )\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n"],"names":["channels","Map","BC","BroadcastChannel","constructor","room","this","onmessage","storage","e","key","data","buffer","newValue","postMessage","buf","getChannel","map","subs","Set","bc","forEach","sub","publish","origin","c","writeSyncStep1","encoder","doc","sv","writeSyncStep2","encodedStateVector","readSyncStep2","decoder","transactionOrigin","decoding","error","console","readUpdate","messageHandlers","provider","emitSynced","_messageType","syncMessageType","messageType","readSyncStep1","Error","synced","_decoder","_emitSynced","awareness","Array","from","getStates","keys","_encoder","y","permissionDeniedHandler","_ydoc","reason","warn","url","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onerror","emit","onclose","filter","client","clientID","status","wsUnsuccessfulReconnects","setTimeout","math","maxBackoffTime","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","disableBc","super","length","slice","encodedParams","object","val","encodeURIComponent","join","_synced","_resyncInterval","setInterval","readyState","OPEN","_bcSubscriber","_updateHandler","update","on","_awarenessUpdateHandler","added","updated","removed","_origin","changedClients","concat","_unloadHandler","window","addEventListener","process","_checkInterval","close","messageReconnectTimeout","state","destroy","clearInterval","disconnect","removeEventListener","off","connectBc","f","add","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc","delete"],"sourceRoot":""}