{"version":3,"file":"1555.e188f3f.js","mappings":"8KAwOUA,E,aA3MR,WAAYC,GAiHJ,KAAAC,KAAOF,EAAQG,UAhHrBC,KAAKC,KAAOJ,EAAQI,KACpBD,KAAKE,QAAUL,EAAQM,OACvBH,KAAKI,QAAUP,EAAQQ,QAAU,KACjCL,KAAKM,SAAWT,EAAQU,SAAW,KACnCP,KAAKQ,SAAWX,EAAQY,SAAW,I,CAiHvC,OA9FE,YAAAC,IAAA,SAAIC,GACF,IACIC,EAAMhB,EAAQiB,UAAUF,GAM5B,OALIX,KAAKF,QAAQc,EACPA,EAAIZ,KAAKF,MAETc,EAAIZ,KAAKF,MAAQE,KAAKc,aAAaH,E,EAgB/C,YAAAI,IAAA,SAAIJ,EAAUK,GACZ,IAAIC,EACAL,EAAMhB,EAAQiB,UAAUF,GAE1BM,EADEjB,KAAKF,QAAQc,EACJA,EAAIZ,KAAKF,MAETc,EAAIZ,KAAKF,MAAQE,KAAKc,aAAaH,GAEhD,IAAIO,EAAWlB,KAAKmB,aAAaR,EAAOK,GACxChB,KAAKoB,aAAaT,EAAOM,EAAWL,EAAIZ,KAAKF,MAAQoB,E,EAYvD,YAAAb,OAAA,SAAOM,GACL,IAAIM,EACAL,EAAMhB,EAAQiB,UAAUF,GAE1BM,EADEjB,KAAKF,QAAQc,EACJA,EAAIZ,KAAKF,MAETc,EAAIZ,KAAKF,MAAQE,KAAKc,aAAaH,GAEhD,IAAIO,EAAWlB,KAAKmB,aAAaR,EAAOM,GACxCjB,KAAKoB,aAAaT,EAAOM,EAAWL,EAAIZ,KAAKF,MAAQoB,E,EAM/C,YAAAJ,aAAR,SAAqBH,GAEnB,OAAOR,EADMH,KAAKE,SACJS,E,EAMR,YAAAQ,aAAR,SAAqBR,EAAUK,GAC7B,IAAIX,EAASL,KAAKI,QAClB,OAAOC,EAASA,EAAOM,EAAOK,GAASA,C,EAMjC,YAAAK,cAAR,SAAsBJ,EAAaC,GACjC,IAAIX,EAAUP,KAAKM,SACnB,OAAOC,EAAUA,EAAQU,EAAUC,GAAYD,IAAaC,C,EAMtD,YAAAE,aAAR,SAAqBT,EAAUM,EAAaC,GAC1C,IAAIT,EAAUT,KAAKQ,SACfC,IAAYT,KAAKqB,cAAcJ,EAAUC,IAC3CT,EAAQE,EAAOM,EAAUC,E,EAS/B,E,IAKA,SAAiBI,GAwEC,EAAAC,UAAhB,SAA0BZ,GACxBf,EAAQ4B,UAAUC,OAAOd,E,CAE5B,CA3ED,CAAiBW,IAAAA,EAAgB,KAgFjC,SAAU1B,GAce,IACjB8B,EANO,EAAAF,UAAY,IAAIG,QAKhB,EAAA5B,SACP2B,EAAK,EACF,WAGL,MAAO,QADI,GADAE,KAAKC,UACKC,MAAM,GACT,IAAIJ,G,GASV,EAAAb,UAAhB,SAA0BF,GACxB,IAAIC,EAAM,EAAAY,UAAUd,IAAIC,GACxB,OAAIC,IAGJA,EAAMmB,OAAO5B,OAAO,MACpB,EAAAqB,UAAUT,IAAIJ,EAAOC,GACdA,E,CAEV,CArCD,CAAUhB,IAAAA,EAAO,I","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/properties/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * A class which attaches a value to an external object.\n *\n * #### Notes\n * Attached properties are used to extend the state of an object with\n * semantic data from an unrelated class. They also encapsulate value\n * creation, coercion, and notification.\n *\n * Because attached property values are stored in a hash table, which\n * in turn is stored in a WeakMap keyed on the owner object, there is\n * non-trivial storage overhead involved in their use. The pattern is\n * therefore best used for the storage of rare data.\n */\nexport class AttachedProperty<T, U> {\n  /**\n   * Construct a new attached property.\n   *\n   * @param options - The options for initializing the property.\n   */\n  constructor(options: AttachedProperty.IOptions<T, U>) {\n    this.name = options.name;\n    this._create = options.create;\n    this._coerce = options.coerce || null;\n    this._compare = options.compare || null;\n    this._changed = options.changed || null;\n  }\n\n  /**\n   * The human readable name for the property.\n   */\n  readonly name: string;\n\n  /**\n   * Get the current value of the property for a given owner.\n   *\n   * @param owner - The property owner of interest.\n   *\n   * @returns The current value of the property.\n   *\n   * #### Notes\n   * If the value has not yet been set, the default value will be\n   * computed and assigned as the current value of the property.\n   */\n  get(owner: T): U {\n    let value: U;\n    let map = Private.ensureMap(owner);\n    if (this._pid in map) {\n      value = map[this._pid];\n    } else {\n      value = map[this._pid] = this._createValue(owner);\n    }\n    return value;\n  }\n\n  /**\n   * Set the current value of the property for a given owner.\n   *\n   * @param owner - The property owner of interest.\n   *\n   * @param value - The value for the property.\n   *\n   * #### Notes\n   * If the value has not yet been set, the default value will be\n   * computed and used as the previous value for the comparison.\n   */\n  set(owner: T, value: U): void {\n    let oldValue: U;\n    let map = Private.ensureMap(owner);\n    if (this._pid in map) {\n      oldValue = map[this._pid];\n    } else {\n      oldValue = map[this._pid] = this._createValue(owner);\n    }\n    let newValue = this._coerceValue(owner, value);\n    this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n  }\n\n  /**\n   * Explicitly coerce the current property value for a given owner.\n   *\n   * @param owner - The property owner of interest.\n   *\n   * #### Notes\n   * If the value has not yet been set, the default value will be\n   * computed and used as the previous value for the comparison.\n   */\n  coerce(owner: T): void {\n    let oldValue: U;\n    let map = Private.ensureMap(owner);\n    if (this._pid in map) {\n      oldValue = map[this._pid];\n    } else {\n      oldValue = map[this._pid] = this._createValue(owner);\n    }\n    let newValue = this._coerceValue(owner, oldValue);\n    this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n  }\n\n  /**\n   * Get or create the default value for the given owner.\n   */\n  private _createValue(owner: T): U {\n    let create = this._create;\n    return create(owner);\n  }\n\n  /**\n   * Coerce the value for the given owner.\n   */\n  private _coerceValue(owner: T, value: U): U {\n    let coerce = this._coerce;\n    return coerce ? coerce(owner, value) : value;\n  }\n\n  /**\n   * Compare the old value and new value for equality.\n   */\n  private _compareValue(oldValue: U, newValue: U): boolean {\n    let compare = this._compare;\n    return compare ? compare(oldValue, newValue) : oldValue === newValue;\n  }\n\n  /**\n   * Run the change notification if the given values are different.\n   */\n  private _maybeNotify(owner: T, oldValue: U, newValue: U): void {\n    let changed = this._changed;\n    if (changed && !this._compareValue(oldValue, newValue)) {\n      changed(owner, oldValue, newValue);\n    }\n  }\n\n  private _pid = Private.nextPID();\n  private _create: (owner: T) => U;\n  private _coerce: ((owner: T, value: U) => U) | null;\n  private _compare: ((oldValue: U, newValue: U) => boolean) | null;\n  private _changed: ((owner: T, oldValue: U, newValue: U) => void) | null;\n}\n\n/**\n * The namespace for the `AttachedProperty` class statics.\n */\nexport namespace AttachedProperty {\n  /**\n   * The options object used to initialize an attached property.\n   */\n  export interface IOptions<T, U> {\n    /**\n     * The human readable name for the property.\n     *\n     * #### Notes\n     * By convention, this should be the same as the name used to define\n     * the public accessor for the property value.\n     *\n     * This **does not** have an effect on the property lookup behavior.\n     * Multiple properties may share the same name without conflict.\n     */\n    name: string;\n\n    /**\n     * A factory function used to create the default property value.\n     *\n     * #### Notes\n     * This will be called whenever the property value is required,\n     * but has not yet been set for a given owner.\n     */\n    create: (owner: T) => U;\n\n    /**\n     * A function used to coerce a supplied value into the final value.\n     *\n     * #### Notes\n     * This will be called whenever the property value is changed, or\n     * when the property is explicitly coerced. The return value will\n     * be used as the final value of the property.\n     *\n     * This will **not** be called for the initial default value.\n     */\n    coerce?: (owner: T, value: U) => U;\n\n    /**\n     * A function used to compare two values for equality.\n     *\n     * #### Notes\n     * This is called to determine if the property value has changed.\n     * It should return `true` if the given values are equivalent, or\n     * `false` if they are different.\n     *\n     * If this is not provided, it defaults to the `===` operator.\n     */\n    compare?: (oldValue: U, newValue: U) => boolean;\n\n    /**\n     * A function called when the property value has changed.\n     *\n     * #### Notes\n     * This will be invoked when the property value is changed and the\n     * comparator indicates that the old value is not equal to the new\n     * value.\n     *\n     * This will **not** be called for the initial default value.\n     */\n    changed?: (owner: T, oldValue: U, newValue: U) => void;\n  }\n\n  /**\n   * Clear the stored property data for the given owner.\n   *\n   * @param owner - The property owner of interest.\n   *\n   * #### Notes\n   * This will clear all property values for the owner, but it will\n   * **not** run the change notification for any of the properties.\n   */\n  export function clearData(owner: any): void {\n    Private.ownerData.delete(owner);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A typedef for a mapping of property id to property value.\n   */\n  export type PropertyMap = { [key: string]: any };\n\n  /**\n   * A weak mapping of property owner to property map.\n   */\n  export const ownerData = new WeakMap<any, PropertyMap>();\n\n  /**\n   * A function which computes successive unique property ids.\n   */\n  export const nextPID = (() => {\n    let id = 0;\n    return () => {\n      let rand = Math.random();\n      let stem = `${rand}`.slice(2);\n      return `pid-${stem}-${id++}`;\n    };\n  })();\n\n  /**\n   * Lookup the data map for the property owner.\n   *\n   * This will create the map if one does not already exist.\n   */\n  export function ensureMap(owner: any): PropertyMap {\n    let map = ownerData.get(owner);\n    if (map) {\n      return map;\n    }\n    map = Object.create(null) as PropertyMap;\n    ownerData.set(owner, map);\n    return map;\n  }\n}\n"],"names":["Private","options","_pid","nextPID","this","name","_create","create","_coerce","coerce","_compare","compare","_changed","changed","get","owner","map","ensureMap","_createValue","set","value","oldValue","newValue","_coerceValue","_maybeNotify","_compareValue","AttachedProperty","clearData","ownerData","delete","id","WeakMap","Math","random","slice","Object"],"sourceRoot":""}