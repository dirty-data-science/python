{"version":3,"file":"4905.667bf33.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/src/singleWidgetShell.ts","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/src/singleWidgetApp.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterFrontEnd } from '@jupyterlab/application';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { find, IIterator, iter } from '@lumino/algorithm';\n\nimport { Token } from '@lumino/coreutils';\n\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { Panel, Widget, PanelLayout } from '@lumino/widgets';\n\n/**\n * The single widget application shell token.\n */\nexport const ISingleWidgetShell = new Token<ISingleWidgetShell>(\n  '@jupyterlite/application:ISingleWidgetShell'\n);\n\n/**\n * The single widget application shell interface.\n */\nexport interface ISingleWidgetShell extends SingleWidgetShell {}\n\n/**\n * The application shell.\n */\nexport class SingleWidgetShell extends Widget implements JupyterFrontEnd.IShell {\n  constructor() {\n    super();\n    this.id = 'main';\n\n    const rootLayout = new PanelLayout();\n    this._main = new Panel();\n    this._main.id = 'single-widget-panel';\n    rootLayout.addWidget(this._main);\n    this.layout = rootLayout;\n  }\n\n  /**\n   * A signal emitted when the current widget changes.\n   */\n  get currentChanged(): ISignal<ISingleWidgetShell, void> {\n    return this._currentChanged;\n  }\n\n  /**\n   * The current widget in the shell's main area.\n   */\n  get currentWidget(): Widget | null {\n    return this._main.widgets[0] ?? null;\n  }\n\n  /**\n   * Activate a widget in its area.\n   */\n  activateById(id: string): void {\n    const widget = find(this.widgets('main'), (w) => w.id === id);\n    if (widget) {\n      widget.activate();\n    }\n  }\n\n  /**\n   * Add a widget to the application shell.\n   *\n   * @param widget - The widget being added.\n   *\n   * @param area - Optional region in the shell into which the widget should\n   * be added.\n   *\n   * @param options - Optional open options.\n   *\n   */\n  add(\n    widget: Widget,\n    area?: Shell.Area,\n    options?: DocumentRegistry.IOpenOptions\n  ): void {\n    if (area === 'main' || area === undefined) {\n      if (this._main.widgets.length > 0) {\n        // do not add the widget if there is already one\n        return;\n      }\n      this._main.addWidget(widget);\n      this._main.update();\n      this._currentChanged.emit(void 0);\n    }\n  }\n\n  /**\n   * Return the list of widgets for the given area.\n   *\n   * @param area The area\n   */\n  widgets(area: Shell.Area): IIterator<Widget> {\n    switch (area ?? 'main') {\n      case 'main':\n        return iter(this._main.widgets);\n      default:\n        throw new Error(`Invalid area: ${area}`);\n    }\n  }\n\n  private _main: Panel;\n  private _currentChanged = new Signal<this, void>(this);\n}\n\n/**\n * A namespace for Shell statics\n */\nexport namespace Shell {\n  /**\n   * The areas of the application shell where widgets can reside.\n   */\n  export type Area = 'main';\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\n\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\n\nimport { LabStatus } from '@jupyterlab/application/lib/status';\n\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { ISingleWidgetShell, SingleWidgetShell } from './singleWidgetShell';\n\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class SingleWidgetApp extends JupyterFrontEnd<ISingleWidgetShell> {\n  /**\n   * Construct a new SingleWidgetApp object.\n   *\n   * @param options The instantiation options for an application.\n   */\n  constructor(options: SingleWidgetApp.IOptions = { shell: new SingleWidgetShell() }) {\n    super({\n      ...options,\n      shell: options.shell ?? new SingleWidgetShell(),\n    });\n    if (options.mimeExtensions) {\n      for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n        this.registerPlugin(plugin);\n      }\n    }\n  }\n\n  /**\n   * The name of the application.\n   */\n  readonly name = 'Single Widget Application';\n\n  /**\n   * A namespace/prefix plugins may use to denote their provenance.\n   */\n  readonly namespace = this.name;\n\n  /**\n   * The application busy and dirty status signals and flags.\n   */\n  readonly status = new LabStatus(this);\n\n  /**\n   * The version of the application.\n   */\n  readonly version = PageConfig.getOption('appVersion') ?? 'unknown';\n\n  /**\n   * The JupyterLab application paths dictionary.\n   */\n  get paths(): JupyterFrontEnd.IPaths {\n    return {\n      urls: {\n        base: PageConfig.getOption('baseUrl'),\n        notFound: PageConfig.getOption('notFoundUrl'),\n        app: PageConfig.getOption('appUrl'),\n        static: PageConfig.getOption('staticUrl'),\n        settings: PageConfig.getOption('settingsUrl'),\n        themes: PageConfig.getOption('themesUrl'),\n        doc: PageConfig.getOption('docUrl'),\n        translations: PageConfig.getOption('translationsApiUrl'),\n        hubHost: PageConfig.getOption('hubHost') || undefined,\n        hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n        hubUser: PageConfig.getOption('hubUser') || undefined,\n        hubServerName: PageConfig.getOption('hubServerName') || undefined,\n      },\n      directories: {\n        appSettings: PageConfig.getOption('appSettingsDir'),\n        schemas: PageConfig.getOption('schemasDir'),\n        static: PageConfig.getOption('staticDir'),\n        templates: PageConfig.getOption('templatesDir'),\n        themes: PageConfig.getOption('themesDir'),\n        userSettings: PageConfig.getOption('userSettingsDir'),\n        serverRoot: PageConfig.getOption('serverRoot'),\n        workspaces: PageConfig.getOption('workspacesDir'),\n      },\n    };\n  }\n\n  /**\n   * Register plugins from a plugin module.\n   *\n   * @param mod - The plugin module to register.\n   */\n  registerPluginModule(mod: SingleWidgetApp.IPluginModule): void {\n    let data = mod.default;\n    // Handle commonjs exports.\n    if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n      data = mod as any;\n    }\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n    data.forEach((item) => {\n      try {\n        this.registerPlugin(item);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  /**\n   * Register the plugins from multiple plugin modules.\n   *\n   * @param mods - The plugin modules to register.\n   */\n  registerPluginModules(mods: SingleWidgetApp.IPluginModule[]): void {\n    mods.forEach((mod) => {\n      this.registerPluginModule(mod);\n    });\n  }\n}\n\n/**\n * A namespace for App statics.\n */\nexport namespace SingleWidgetApp {\n  /**\n   * The instantiation options for an App application.\n   */\n  export interface IOptions\n    extends JupyterFrontEnd.IOptions<ISingleWidgetShell>,\n      Partial<IInfo> {}\n\n  /**\n   * The information about a Jupyter Notebook application.\n   */\n  export interface IInfo {\n    /**\n     * The mime renderer extensions.\n     */\n    readonly mimeExtensions: IRenderMime.IExtensionModule[];\n  }\n\n  /**\n   * The interface for a module that exports a plugin or plugins as\n   * the default value.\n   */\n  export interface IPluginModule {\n    /**\n     * The default export.\n     */\n    default: JupyterFrontEndPlugin<any> | JupyterFrontEndPlugin<any>[];\n  }\n}\n"],"names":["ISingleWidgetShell","Token","SingleWidgetShell","Widget","constructor","super","_currentChanged","Signal","this","id","rootLayout","PanelLayout","_main","Panel","addWidget","layout","currentChanged","currentWidget","widgets","activateById","widget","find","w","activate","add","area","options","undefined","length","update","emit","iter","Error","SingleWidgetApp","JupyterFrontEnd","shell","name","namespace","status","version","PageConfig","mimeExtensions","plugin","registerPlugin","paths","urls","base","notFound","app","static","settings","themes","doc","translations","hubHost","hubPrefix","hubUser","hubServerName","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces","registerPluginModule","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","error","console","registerPluginModules","mods"],"sourceRoot":""}