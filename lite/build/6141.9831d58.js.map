{"version":3,"file":"6141.9831d58.js","mappings":"sOAYA,MAAMA,EAAY,sBAoBX,MAAMC,UAAuB,EAAAC,OAClCC,cACEC,QACAC,KAAKC,SAAS,sBACdD,KAAKE,QAAUC,SAASC,cAAc,UACtCJ,KAAKK,KAAKC,YAAYN,KAAKE,QAC7B,CAKAK,kBAAkBC,G,QACZR,KAAKE,QAAQO,YACfT,KAAKE,QAAQO,WAAWC,YAAYV,KAAKE,SAG3C,MAAMS,EAAQ,IAAI,EAAAC,gBAClBZ,KAAKE,QAAUC,SAASC,cAAc,UACtCJ,KAAKE,QAAQW,OAAS,KACpBF,EAAMG,aAAQ,EAAO,EAEvBd,KAAKK,KAAKC,YAAYN,KAAKE,eACrBS,EAAMI,QACZ,MAAMC,EAAOR,EAAMQ,KAAKrB,GACxB,IAAKqB,IAAShB,KAAKE,QAAQe,cACzB,OAEF,MAAMC,EAAWV,EAAMU,SAASvB,GAChCK,KAAKE,QAAQiB,MAAuB,QAAf,EAAAD,aAAQ,EAARA,EAAUC,aAAK,QAAI,OACxCnB,KAAKE,QAAQkB,OAAyB,QAAhB,EAAAF,aAAQ,EAARA,EAAUE,cAAM,QAAI,QAC1CpB,KAAKE,QAAQe,cAAcd,SAASkB,MAAML,EAC5C,CAKAM,UACEtB,KAAKE,QAAQqB,SACbxB,MAAMuB,SACR,EAQK,MAAME,EAAgD,CAC3DC,MAAM,EACNC,UAAW,CAAC/B,GACZgC,YAAa,IACbC,eAAiBC,GAAY,IAAIjC,GAiBnC,EAdsE,CACpE,CACEkC,GAAI,wCACJN,kBACAO,SAAU,SACVC,6BAA8B,CAC5BC,KAAM,SACNC,gBAAiB,SACjBC,UAAW,CAAC,UACZC,WAAY,CAAC,Y","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/iframe-extension/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { PromiseDelegate } from '@lumino/coreutils';\n\nimport { Widget } from '@lumino/widgets';\n\n/**\n * The MIME type for IFrame.\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n\n/**\n * The interface for the metadata\n */\ninterface IIFrameMetadata {\n  /**\n   * The suggested width of the IFrame\n   */\n  width?: string;\n\n  /**\n   * The suggested height of the IFrame\n   */\n  height?: string;\n}\n\n/**\n * A class for rendering an IFrame document.\n */\nexport class RenderedIFrame extends Widget implements IRenderMime.IRenderer {\n  constructor() {\n    super();\n    this.addClass('jp-IFrameContainer');\n    this._iframe = document.createElement('iframe');\n    this.node.appendChild(this._iframe);\n  }\n\n  /**\n   * Render the IFrame into this widget's node.\n   */\n  async renderModel(model: IRenderMime.IMimeModel): Promise<void> {\n    if (this._iframe.parentNode) {\n      this._iframe.parentNode.removeChild(this._iframe);\n    }\n\n    const ready = new PromiseDelegate<void>();\n    this._iframe = document.createElement('iframe');\n    this._iframe.onload = () => {\n      ready.resolve(void 0);\n    };\n    this.node.appendChild(this._iframe);\n    await ready.promise;\n    const data = model.data[MIME_TYPE] as string | undefined;\n    if (!data || !this._iframe.contentWindow) {\n      return;\n    }\n    const metadata = model.metadata[MIME_TYPE] as IIFrameMetadata | undefined;\n    this._iframe.width = metadata?.width ?? '100%';\n    this._iframe.height = metadata?.height ?? '400px';\n    this._iframe.contentWindow.document.write(data);\n  }\n\n  /**\n   * Dispose of the resources held by the iframe widget.\n   */\n  dispose(): void {\n    this._iframe.remove();\n    super.dispose();\n  }\n\n  private _iframe: HTMLIFrameElement;\n}\n\n/**\n * A mime renderer factory for IFrame data.\n */\nexport const rendererFactory: IRenderMime.IRendererFactory = {\n  safe: false,\n  mimeTypes: [MIME_TYPE],\n  defaultRank: 100,\n  createRenderer: (options) => new RenderedIFrame(),\n};\n\nconst extensions: IRenderMime.IExtension | IRenderMime.IExtension[] = [\n  {\n    id: '@jupyterlite/iframe-extension:factory',\n    rendererFactory,\n    dataType: 'string',\n    documentWidgetFactoryOptions: {\n      name: 'IFrame',\n      primaryFileType: 'IFrame',\n      fileTypes: ['IFrame'],\n      defaultFor: ['IFrame'],\n    },\n  },\n];\n\nexport default extensions;\n"],"names":["MIME_TYPE","RenderedIFrame","Widget","constructor","super","this","addClass","_iframe","document","createElement","node","appendChild","async","model","parentNode","removeChild","ready","PromiseDelegate","onload","resolve","promise","data","contentWindow","metadata","width","height","write","dispose","remove","rendererFactory","safe","mimeTypes","defaultRank","createRenderer","options","id","dataType","documentWidgetFactoryOptions","name","primaryFileType","fileTypes","defaultFor"],"sourceRoot":""}