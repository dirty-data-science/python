{"version":3,"file":"9382.9014799.js","mappings":"4OAwBA,MAyGA,EAP8C,CAlGA,CAC5CA,GAAI,oDACJC,SAAU,CAAC,EAAAC,iBACXC,WAAW,EACXC,SAAU,CAACC,EAAsBC,KAC/B,MAAMC,EAAU,EAAAC,WAAA,aAChBF,EAAQG,YAAYC,SAAQC,MAAOC,EAAMC,KACvC,MAAM,eAAEC,GAAmBD,EAE3B,GAAa,aADA,EAAAL,WAAA,UAAqB,aAEhC,OAEF,MAAMO,EAAOD,EAAeC,KAC5BC,OAAOC,KAAK,GAAGV,wBAA8BQ,IAAQ,UAGrDF,EAAQK,SAAS,GACjB,GAS0C,CAC9ClB,GAAI,sDACJC,SAAU,CAAC,EAAAkB,kBACXhB,WAAW,EACXC,SAAU,CAACC,EAAsBe,KAC/B,MAAMb,EAAU,EAAAC,WAAA,aAGVa,EAAUD,EAAWH,KAC3BG,EAAWH,KAAO,CAChBF,EACAO,EAAa,UACbC,EACAC,KAGA,GAAY,YADAA,aAAO,EAAPA,EAASC,KAGnB,YADAJ,EAAQK,KAAKN,EAAYL,EAAMO,EAAYC,EAAQC,GAGrD,MACMG,EAAgB,WADV,EAAAC,QAAA,QAAgBb,GACK,YAAc,OAC/CC,OAAOC,KAAK,GAAGV,UAAgBoB,UAAcZ,IAC7B,CACjB,GAOqC,CACxCf,GAAI,gDACJG,WAAW,EACXC,SAAWC,IACT,MAAME,EAAU,EAAAC,WAAA,aACVqB,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,GAAGzB,cACfsB,EAAKI,OAAS,SACdJ,EAAKK,IAAM,sBACX,MAAMC,EAAO,IAAI,EAAAC,OAAO,CAAEP,SAE1B,EAAAQ,aAAA,QAAqB,CACnBC,UAAWT,EACXU,gBAAiB,SACjBC,QAAS,kBACTC,OAAQ,OACRC,MAAO,SAETP,EAAKnC,GAAK,eACVK,EAAIsC,MAAMC,IAAIT,EAAM,MAAO,CAAEU,KAAM,GAAI,GAOS,CAClD7C,GAAI,2DACJG,WAAW,EACX2C,SAAU,CAAC,EAAAC,aACX3C,SAAU,CAACC,EAAsB2C,KAC3BA,GACFA,EAAWC,eAAevC,SAAQ,KAChCwC,uBAAsB,KACpB7C,EAAI8C,SAASC,sBAAsB,GACnC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/retro-application-extension/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterFrontEndPlugin, JupyterFrontEnd } from '@jupyterlab/application';\n\nimport { IConsoleTracker } from '@jupyterlab/console';\n\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\n\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\nimport { DocumentRegistry, IDocumentWidget } from '@jupyterlab/docregistry';\n\nimport { Kernel } from '@jupyterlab/services';\n\nimport { liteWordmark } from '@jupyterlite/ui-components';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { IRetroShell } from '@retrolab/application';\n\n/**\n * Open consoles in a new tab.\n */\nconst consoles: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/retro-application-extension:consoles',\n  requires: [IConsoleTracker],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, tracker: IConsoleTracker) => {\n    const baseUrl = PageConfig.getBaseUrl();\n    tracker.widgetAdded.connect(async (send, console) => {\n      const { sessionContext } = console;\n      const page = PageConfig.getOption('retroPage');\n      if (page === 'consoles') {\n        return;\n      }\n      const path = sessionContext.path;\n      window.open(`${baseUrl}retro/consoles?path=${path}`, '_blank');\n\n      // the widget is not needed anymore\n      console.dispose();\n    });\n  },\n};\n\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/retro-application-extension:docmanager',\n  requires: [IDocumentManager],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, docManager: IDocumentManager) => {\n    const baseUrl = PageConfig.getBaseUrl();\n\n    // patch the `docManager.open` option to prevent the default behavior\n    const docOpen = docManager.open;\n    docManager.open = (\n      path: string,\n      widgetName = 'default',\n      kernel?: Partial<Kernel.IModel>,\n      options?: DocumentRegistry.IOpenOptions\n    ): IDocumentWidget | undefined => {\n      const ref = options?.ref;\n      if (ref === '_noref') {\n        docOpen.call(docManager, path, widgetName, kernel, options);\n        return;\n      }\n      const ext = PathExt.extname(path);\n      const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n      window.open(`${baseUrl}retro/${route}?path=${path}`);\n      return undefined;\n    };\n  },\n};\n\n/**\n * The logo plugin.\n */\nconst logo: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/retro-application-extension:logo',\n  autoStart: true,\n  activate: (app: JupyterFrontEnd) => {\n    const baseUrl = PageConfig.getBaseUrl();\n    const node = document.createElement('a');\n    node.href = `${baseUrl}retro/tree`;\n    node.target = '_blank';\n    node.rel = 'noopener noreferrer';\n    const logo = new Widget({ node });\n\n    liteWordmark.element({\n      container: node,\n      elementPosition: 'center',\n      padding: '2px 2px 2px 8px',\n      height: '28px',\n      width: 'auto',\n    });\n    logo.id = 'jp-RetroLogo';\n    app.shell.add(logo, 'top', { rank: 0 });\n  },\n};\n\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/retro-application-extension:notify-commands',\n  autoStart: true,\n  optional: [IRetroShell],\n  activate: (app: JupyterFrontEnd, retroShell: IRetroShell | null) => {\n    if (retroShell) {\n      retroShell.currentChanged.connect(() => {\n        requestAnimationFrame(() => {\n          app.commands.notifyCommandChanged();\n        });\n      });\n    }\n  },\n};\n\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  consoles,\n  docmanager,\n  logo,\n  notifyCommands,\n];\n\nexport default plugins;\n"],"names":["id","requires","IConsoleTracker","autoStart","activate","app","tracker","baseUrl","PageConfig","widgetAdded","connect","async","send","console","sessionContext","path","window","open","dispose","IDocumentManager","docManager","docOpen","widgetName","kernel","options","ref","call","route","PathExt","node","document","createElement","href","target","rel","logo","Widget","liteWordmark","container","elementPosition","padding","height","width","shell","add","rank","optional","IRetroShell","retroShell","currentChanged","requestAnimationFrame","commands","notifyCommandChanged"],"sourceRoot":""}