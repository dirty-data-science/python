{"version":3,"file":"9960.64cd61e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/src/index.tsx"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IRouter,\n  JupyterFrontEndPlugin,\n  JupyterFrontEnd,\n  ILabShell,\n} from '@jupyterlab/application';\n\nimport { Clipboard, ICommandPalette, Dialog, showDialog } from '@jupyterlab/apputils';\n\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\nimport {\n  IDocumentProvider,\n  IDocumentProviderFactory,\n  ProviderMock,\n} from '@jupyterlab/docprovider';\n\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n\nimport { IMainMenu } from '@jupyterlab/mainmenu';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { downloadIcon, linkIcon } from '@jupyterlab/ui-components';\n\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\n\nimport { filter, toArray } from '@lumino/algorithm';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { getParam } from 'lib0/environment';\n\nimport React from 'react';\n\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|notebooks|edit|consoles)\\\\/?');\n\n/**\n * The command IDs used by the application extension.\n */\nnamespace CommandIDs {\n  export const about = 'application:about';\n\n  export const docmanagerDownload = 'docmanager:download';\n\n  export const filebrowserDownload = 'filebrowser:download';\n\n  export const copyShareableLink = 'filebrowser:share-main';\n}\n\n/**\n * The name of the translation bundle for internationalized strings.\n */\n\nconst I18N_BUNDLE = 'jupyterlite';\n\n/**\n * Add a command to show an About dialog.\n */\nconst about: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:about',\n  autoStart: true,\n  requires: [ITranslator],\n  optional: [ICommandPalette, IMainMenu],\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator,\n    palette: ICommandPalette | null,\n    menu: IMainMenu | null\n  ): void => {\n    const { commands } = app;\n    const trans = translator.load(I18N_BUNDLE);\n    const category = trans.__('Help');\n\n    commands.addCommand(CommandIDs.about, {\n      label: trans.__('About %1', app.name),\n      execute: () => {\n        const versionNumber = trans.__('Version %1', app.version);\n        const versionInfo = (\n          <span className=\"jp-About-version-info\">\n            <span className=\"jp-About-version\">{versionNumber}</span>\n          </span>\n        );\n        const title = (\n          <span className=\"jp-About-header\">\n            <div className=\"jp-About-header-info\">\n              <liteWordmark.react height=\"auto\" width=\"196px\" />\n              {versionInfo}\n            </div>\n          </span>\n        );\n\n        // Create the body of the about dialog\n        const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n        const contributorsURL =\n          'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n        const externalLinks = (\n          <span className=\"jp-About-externalLinks\">\n            <a\n              href={contributorsURL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"jp-Button-flat\"\n            >\n              {trans.__('CONTRIBUTOR LIST')}\n            </a>\n            <a\n              href={jupyterliteURL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"jp-Button-flat\"\n            >\n              {trans.__('JUPYTERLITE ON GITHUB')}\n            </a>\n          </span>\n        );\n        const copyright = (\n          <span className=\"jp-About-copyright\">\n            {trans.__('Â© 2021-2022 JupyterLite Contributors')}\n          </span>\n        );\n        const body = (\n          <div className=\"jp-About-body\">\n            {externalLinks}\n            {copyright}\n          </div>\n        );\n\n        return showDialog({\n          title,\n          body,\n          buttons: [\n            Dialog.createButton({\n              label: trans.__('Dismiss'),\n              className: 'jp-About-button jp-mod-reject jp-mod-styled',\n            }),\n          ],\n        });\n      },\n    });\n\n    if (palette) {\n      palette.addItem({ command: CommandIDs.about, category });\n    }\n\n    if (menu) {\n      menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n    }\n  },\n};\n\n/**\n * An alternative document provider plugin\n */\nconst docProviderPlugin: JupyterFrontEndPlugin<IDocumentProviderFactory> = {\n  id: '@jupyterlite/application-extension:docprovider',\n  provides: IDocumentProviderFactory,\n  requires: [ITranslator],\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator\n  ): IDocumentProviderFactory => {\n    const collaborative = PageConfig.getOption('collaborative') === 'true';\n    const factory = (options: IDocumentProviderFactory.IOptions): IDocumentProvider => {\n      if (collaborative) {\n        const trans = translator.load(I18N_BUNDLE);\n        console.warn(\n          trans.__(\n            'The `collaborative` feature was enabled, but no docprovider is available.'\n          )\n        );\n        console.info(\n          trans.__(\n            'Install `jupyterlab-webrtc-docprovider` to enable WebRTC-based collaboration.'\n          )\n        );\n      }\n      return new ProviderMock();\n    };\n    return factory;\n  },\n};\n\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:download',\n  autoStart: true,\n  requires: [ITranslator, IDocumentManager],\n  optional: [ICommandPalette, IFileBrowserFactory],\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator,\n    docManager: IDocumentManager,\n    palette: ICommandPalette | null,\n    factory: IFileBrowserFactory | null\n  ) => {\n    const trans = translator.load(I18N_BUNDLE);\n    const { commands, serviceManager, shell } = app;\n    const { contents } = serviceManager;\n\n    const isEnabled = () => {\n      const { currentWidget } = shell;\n      return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n\n    const downloadContent = async (contentPath: string, fileName: string) => {\n      const model = await contents.get(contentPath, { content: true });\n      const element = document.createElement('a');\n      if (model.type === 'notebook' || model.format === 'json') {\n        const mime = model.mimetype ?? 'text/json';\n        const content = JSON.stringify(model.content, null, 2);\n        element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n      } else if (model.type === 'file') {\n        if (model.format === 'base64') {\n          const mime = model.mimetype ?? 'application/octet-stream';\n          element.href = `data:${mime};base64,${model.content}`;\n        } else {\n          const mime = model.mimetype ?? 'text/plain';\n          element.href = `data:${mime};charset=utf-8,${encodeURIComponent(\n            model.content\n          )}`;\n        }\n      } else {\n        throw new Error(`Content whose type is \"${model.type}\" cannot be downloaded`);\n      }\n      element.download = fileName;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    };\n\n    commands.addCommand(CommandIDs.docmanagerDownload, {\n      label: trans.__('Download'),\n      caption: trans.__('Download the file to your computer'),\n      isEnabled,\n      execute: async () => {\n        // Checks that shell.currentWidget is valid:\n        const current = shell.currentWidget;\n        if (!isEnabled() || !current) {\n          return;\n        }\n        const context = docManager.contextForWidget(current);\n        if (!context) {\n          return showDialog({\n            title: trans.__('Cannot Download'),\n            body: trans.__('No context found for current widget!'),\n            buttons: [Dialog.okButton({ label: trans.__('OK') })],\n          });\n        }\n        await context.save();\n        await downloadContent(context.path, context.path);\n      },\n    });\n\n    const category = trans.__('File Operations');\n\n    if (palette) {\n      palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n    }\n\n    if (factory) {\n      const { tracker } = factory;\n\n      commands.addCommand(CommandIDs.filebrowserDownload, {\n        execute: async () => {\n          const widget = tracker.currentWidget;\n\n          if (!widget) {\n            return;\n          }\n          const selected = toArray(widget.selectedItems());\n          selected.forEach(async (item: Contents.IModel) => {\n            if (item.type === 'directory') {\n              return;\n            }\n            await downloadContent(item.path, item.name);\n          });\n        },\n        icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Download'),\n      });\n    }\n  },\n};\n\n/**\n * The main application icon.\n */\nconst liteLogo: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:logo',\n  // marking as optional to not throw errors in retro\n  optional: [ILabShell],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, labShell: ILabShell) => {\n    if (!labShell) {\n      return;\n    }\n    const logo = new Widget();\n    liteIcon.element({\n      container: logo.node,\n      elementPosition: 'center',\n      margin: '2px 2px 2px 8px',\n      height: 'auto',\n      width: '16px',\n    });\n    logo.id = 'jp-MainLogo';\n    labShell.add(logo, 'top', { rank: 0 });\n  },\n};\n\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:notify-commands',\n  autoStart: true,\n  optional: [ILabShell],\n  activate: (app: JupyterFrontEnd, labShell: ILabShell | null) => {\n    if (labShell) {\n      labShell.layoutModified.connect(() => {\n        app.commands.notifyCommandChanged();\n      });\n    }\n  },\n};\n\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:opener',\n  autoStart: true,\n  requires: [IRouter, IDocumentManager],\n  optional: [ILabShell],\n  activate: (\n    app: JupyterFrontEnd,\n    router: IRouter,\n    docManager: IDocumentManager,\n    labShell: ILabShell | null\n  ): void => {\n    const { commands } = app;\n\n    const command = 'router:tree';\n    commands.addCommand(command, {\n      execute: (args: any) => {\n        const parsed = args as IRouter.ILocation;\n        // use request to do the matching\n        const { request, search } = parsed;\n        const matches = request.match(URL_PATTERN) ?? [];\n        if (!matches) {\n          return;\n        }\n\n        const urlParams = new URLSearchParams(search);\n        const paths = urlParams.getAll('path');\n        if (!paths) {\n          return;\n        }\n        const files = paths.map((path) => decodeURIComponent(path));\n        app.restored.then(() => {\n          const page = PageConfig.getOption('retroPage');\n          const [file] = files;\n          switch (page) {\n            case 'consoles': {\n              commands.execute('console:create', { path: file });\n              return;\n            }\n            case 'notebooks': {\n              docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                ref: '_noref',\n              });\n              return;\n            }\n            case 'edit': {\n              docManager.open(file, EDITOR_FACTORY, undefined, {\n                ref: '_noref',\n              });\n              return;\n            }\n            default: {\n              // open all files in the lab interface\n              files.forEach((file) => docManager.open(file));\n              const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n              // only remove the path (to keep extra parameters like the RTC room)\n              url.searchParams.delete('path');\n              const { pathname, search } = url;\n              router.navigate(`${pathname}${search}`, { skipRouting: true });\n\n              if (labShell) {\n                // open the folder where the files are located on startup\n                const showInBrowser = () => {\n                  commands.execute('docmanager:show-in-file-browser');\n                  labShell.currentChanged.disconnect(showInBrowser);\n                };\n\n                labShell.currentChanged.connect(showInBrowser);\n              }\n              break;\n            }\n          }\n        });\n      },\n    });\n\n    router.register({ command, pattern: URL_PATTERN });\n  },\n};\n\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlite/application-extension:share-file',\n  requires: [IFileBrowserFactory, ITranslator],\n  autoStart: true,\n  activate: (\n    app: JupyterFrontEnd,\n    factory: IFileBrowserFactory,\n    translator: ITranslator\n  ): void => {\n    const trans = translator.load(I18N_BUNDLE);\n    const { commands } = app;\n    const { tracker } = factory;\n\n    const roomName = getParam('--room', '').trim();\n    const collaborative = PageConfig.getOption('collaborative') === 'true' && roomName;\n\n    commands.addCommand(CommandIDs.copyShareableLink, {\n      execute: () => {\n        const widget = tracker.currentWidget;\n        if (!widget) {\n          return;\n        }\n\n        const url = new URL(URLExt.join(PageConfig.getBaseUrl(), 'lab'));\n        const models = toArray(\n          filter(widget.selectedItems(), (item) => item.type !== 'directory')\n        );\n        models.forEach((model) => {\n          url.searchParams.append('path', model.path);\n        });\n        if (collaborative) {\n          url.searchParams.append('room', roomName);\n        }\n        Clipboard.copyToSystem(url.href);\n      },\n      isVisible: () =>\n        !!tracker.currentWidget &&\n        toArray(tracker.currentWidget.selectedItems()).length >= 1,\n      icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n      label: trans.__('Copy Shareable Link'),\n    });\n  },\n};\n\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  about,\n  docProviderPlugin,\n  downloadPlugin,\n  liteLogo,\n  notifyCommands,\n  opener,\n  shareFile,\n];\n\nexport default plugins;\n"],"names":["URL_PATTERN","RegExp","CommandIDs","about","docmanagerDownload","filebrowserDownload","copyShareableLink","I18N_BUNDLE","id","autoStart","requires","ITranslator","optional","ICommandPalette","IMainMenu","activate","app","translator","palette","menu","commands","trans","load","category","__","addCommand","label","name","execute","versionNumber","version","versionInfo","className","title","liteWordmark","height","width","externalLinks","href","target","rel","copyright","body","showDialog","buttons","Dialog","addItem","command","helpMenu","addGroup","provides","IDocumentProviderFactory","collaborative","PageConfig","options","console","warn","info","ProviderMock","IDocumentManager","IFileBrowserFactory","docManager","factory","serviceManager","shell","contents","isEnabled","currentWidget","contextForWidget","downloadContent","async","contentPath","fileName","model","get","content","element","document","createElement","type","format","mime","mimetype","JSON","stringify","encodeURIComponent","Error","download","appendChild","click","removeChild","caption","current","context","save","path","tracker","widget","toArray","selectedItems","forEach","item","icon","downloadIcon","stylesheet","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","add","rank","layoutModified","connect","notifyCommandChanged","IRouter","router","args","parsed","request","search","match","paths","URLSearchParams","getAll","files","map","decodeURIComponent","restored","then","page","file","open","undefined","ref","url","URL","URLExt","searchParams","delete","pathname","navigate","skipRouting","showInBrowser","currentChanged","disconnect","register","pattern","roomName","trim","filter","append","Clipboard","isVisible","length","linkIcon"],"sourceRoot":""}