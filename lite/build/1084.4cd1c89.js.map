{"version":3,"file":"1084.4cd1c89.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/dragdrop/src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { MimeData } from '@lumino/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\n/**\n * A type alias which defines the possible independent drop actions.\n *\n * @deprecated This type will be renamed Drag.DropAction in @lumino/dragdrop@^2.0.0\n */\nexport type DropAction = 'none' | 'copy' | 'link' | 'move';\n\n/**\n * A type alias which defines the possible supported drop actions.\n *\n * @deprecated This type will be renamed Drag.SupportedActions in @lumino/dragdrop@^2.0.0\n */\nexport type SupportedActions =\n  | DropAction\n  | 'copy-link'\n  | 'copy-move'\n  | 'link-move'\n  | 'all';\n\n/**\n * A custom event type used for drag-drop operations.\n *\n * #### Notes\n * In order to receive `'lm-dragover'`, `'lm-dragleave'`, or `'lm-drop'`\n * events, a drop target must cancel the `'lm-dragenter'` event by\n * calling the event's `preventDefault()` method.\n *\n * @deprecated This interface will be deprecated in @lumino/dragdrop@^2.0.0 in favor\n * of ``Drag.Event``.\n */\nexport interface IDragEvent extends MouseEvent {\n  /**\n   * The drop action supported or taken by the drop target.\n   *\n   * #### Notes\n   * At the start of each event, this value will be `'none'`. During a\n   * `'lm-dragover'` event, the drop target must set this value to one\n   * of the supported actions, or the drop event will not occur.\n   *\n   * When handling the drop event, the drop target should set this\n   * to the action which was *actually* taken. This value will be\n   * reported back to the drag initiator.\n   */\n  dropAction: DropAction;\n\n  /**\n   * The drop action proposed by the drag initiator.\n   *\n   * #### Notes\n   * This is the action which is *preferred* by the drag initiator. The\n   * drop target is not required to perform this action, but should if\n   * it all possible.\n   */\n  readonly proposedAction: DropAction;\n\n  /**\n   * The drop actions supported by the drag initiator.\n   *\n   * #### Notes\n   * If the `dropAction` is not set to one of the supported actions\n   * during the `'lm-dragover'` event, the drop event will not occur.\n   */\n  readonly supportedActions: SupportedActions;\n\n  /**\n   * The mime data associated with the event.\n   *\n   * #### Notes\n   * This is mime data provided by the drag initiator. Drop targets\n   * should use this data to determine if they can handle the drop.\n   */\n  readonly mimeData: MimeData;\n\n  /**\n   * The source object of the drag, as provided by the drag initiator.\n   *\n   * #### Notes\n   * For advanced applications, the drag initiator may wish to expose\n   * a source object to the drop targets. That will be provided here\n   * if given by the drag initiator, otherwise it will be `null`.\n   */\n  readonly source: any;\n}\n\n/**\n * An object which manages a drag-drop operation.\n *\n * A drag object dispatches four different events to drop targets:\n *\n * - `'lm-dragenter'` - Dispatched when the mouse enters the target\n *   element. This event must be canceled in order to receive any\n *   of the other events.\n *\n * - `'lm-dragover'` - Dispatched when the mouse moves over the drop\n *   target. It must cancel the event and set the `dropAction` to one\n *   of the supported actions in order to receive drop events.\n *\n * - `'lm-dragleave'` - Dispatched when the mouse leaves the target\n *   element. This includes moving the mouse into child elements.\n *\n * - `'lm-drop'`- Dispatched when the mouse is released over the target\n *   element when the target indicates an appropriate drop action. If\n *   the event is canceled, the indicated drop action is returned to\n *   the initiator through the resolved promise.\n *\n * A drag operation can be terminated at any time by pressing `Escape`\n * or by disposing the drag object.\n *\n * A drag object has the ability to automatically scroll a scrollable\n * element when the mouse is hovered near one of its edges. To enable\n * this, add the `data-lm-dragscroll` attribute to any element which\n * the drag object should consider for scrolling.\n *\n * #### Notes\n * This class is designed to be used when dragging and dropping custom\n * data *within* a single application. It is *not* a replacement for\n * the native drag-drop API. Instead, it provides an API which allows\n * drag operations to be initiated programmatically and enables the\n * transfer of arbitrary non-string objects; features which are not\n * possible with the native drag-drop API.\n */\nexport class Drag implements IDisposable {\n  /**\n   * Construct a new drag object.\n   *\n   * @param options - The options for initializing the drag.\n   */\n  constructor(options: Drag.IOptions) {\n    this.document = options.document || document;\n    this.mimeData = options.mimeData;\n    this.dragImage = options.dragImage || null;\n    this.proposedAction = options.proposedAction || 'copy';\n    this.supportedActions = options.supportedActions || 'all';\n    this.source = options.source || null;\n  }\n\n  /**\n   * Dispose of the resources held by the drag object.\n   *\n   * #### Notes\n   * This will cancel the drag operation if it is active.\n   */\n  dispose(): void {\n    // Do nothing if the drag object is already disposed.\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n\n    // If there is a current target, dispatch a drag leave event.\n    if (this._currentTarget) {\n      let event = Private.createMouseEvent('pointerup', -1, -1);\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n    }\n\n    // Finalize the drag object with `'none'`.\n    this._finalize('none');\n  }\n\n  /**\n   * The mime data for the drag object.\n   */\n  readonly mimeData: MimeData;\n\n  /**\n   * The target document for dragging events.\n   */\n  readonly document: Document | ShadowRoot;\n\n  /**\n   * The drag image element for the drag object.\n   */\n  readonly dragImage: HTMLElement | null;\n\n  /**\n   * The proposed drop action for the drag object.\n   */\n  readonly proposedAction: DropAction;\n\n  /**\n   * The supported drop actions for the drag object.\n   */\n  readonly supportedActions: SupportedActions;\n\n  /**\n   * Get the drag source for the drag object.\n   */\n  readonly source: any;\n\n  /**\n   * Test whether the drag object is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Start the drag operation at the specified client position.\n   *\n   * @param clientX - The client X position for the drag start.\n   *\n   * @param clientY - The client Y position for the drag start.\n   *\n   * @returns A promise which resolves to the result of the drag.\n   *\n   * #### Notes\n   * If the drag has already been started, the promise created by the\n   * first call to `start` is returned.\n   *\n   * If the drag operation has ended, or if the drag object has been\n   * disposed, the returned promise will resolve to `'none'`.\n   *\n   * The drag object will be automatically disposed when drag operation\n   * completes. This means `Drag` objects are for single-use only.\n   *\n   * This method assumes the left mouse button is already held down.\n   */\n  start(clientX: number, clientY: number): Promise<DropAction> {\n    // If the drag object is already disposed, resolve to `None`.\n    if (this._disposed) {\n      return Promise.resolve('none' as DropAction);\n    }\n\n    // If the drag has already been started, return the promise.\n    if (this._promise) {\n      return this._promise;\n    }\n\n    // Install the document listeners for the drag object.\n    this._addListeners();\n\n    // Attach the drag image at the specified client position.\n    this._attachDragImage(clientX, clientY);\n\n    // Create the promise which will be resolved on completion.\n    this._promise = new Promise<DropAction>((resolve, reject) => {\n      this._resolve = resolve;\n    });\n\n    // Trigger a fake move event to kick off the drag operation.\n    let event = Private.createMouseEvent('pointermove', clientX, clientY);\n    document.dispatchEvent(event);\n\n    // Return the pending promise for the drag operation.\n    return this._promise;\n  }\n\n  /**\n   * Handle the DOM events for the drag operation.\n   *\n   * @param event - The DOM event sent to the drag object.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the document. It should not be\n   * called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'mousemove': // <DEPRECATED>\n        this._evtMouseMove(event as MouseEvent);\n        break;\n      case 'mouseup': // <DEPRECATED>\n        this._evtMouseUp(event as MouseEvent);\n        break;\n      case 'pointermove':\n        this._evtMouseMove(event as MouseEvent);\n        break;\n      case 'pointerup':\n        this._evtMouseUp(event as MouseEvent);\n        break;\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      default:\n        // Stop all other events during drag-drop.\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n    }\n  }\n\n  /**\n   * Move the drag image element to the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  protected moveDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let style = this.dragImage.style;\n    style.top = `${clientY}px`;\n    style.left = `${clientX}px`;\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the drag object.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Update the current target node and dispatch enter/leave events.\n    this._updateCurrentTarget(event);\n\n    // Update the drag scroll element.\n    this._updateDragScroll(event);\n\n    // Move the drag image to the specified client position. This is\n    // performed *after* dispatching to prevent unnecessary reflows.\n    this.moveDragImage(event.clientX, event.clientY);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the drag object.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Do nothing if the left button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Update the current target node and dispatch enter/leave events.\n    // This prevents a subtle issue where the DOM mutates under the\n    // cursor after the last move event but before the drop event.\n    this._updateCurrentTarget(event);\n\n    // If there is no current target, finalize with `'none'`.\n    if (!this._currentTarget) {\n      this._finalize('none');\n      return;\n    }\n\n    // If the last drop action was `'none'`, dispatch a leave event\n    // to the current target and finalize the drag with `'none'`.\n    if (this._dropAction === 'none') {\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n      this._finalize('none');\n      return;\n    }\n\n    // Dispatch the drop event at the current target and finalize\n    // with the resulting drop action.\n    let action = Private.dispatchDrop(this, this._currentTarget, event);\n    this._finalize(action);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the drag object.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Cancel the drag if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Add the document event listeners for the drag object.\n   */\n  private _addListeners(): void {\n    document.addEventListener('mousedown', this, true); // <DEPRECATED>\n    document.addEventListener('mousemove', this, true); // <DEPRECATED>\n    document.addEventListener('mouseup', this, true); // <DEPRECATED>\n    document.addEventListener('mouseenter', this, true); // <DEPRECATED>\n    document.addEventListener('mouseleave', this, true); // <DEPRECATED>\n    document.addEventListener('mouseover', this, true); // <DEPRECATED>\n    document.addEventListener('mouseout', this, true); // <DEPRECATED>\n    document.addEventListener('pointerdown', this, true);\n    document.addEventListener('pointermove', this, true);\n    document.addEventListener('pointerup', this, true);\n    document.addEventListener('pointerenter', this, true);\n    document.addEventListener('pointerleave', this, true);\n    document.addEventListener('pointerover', this, true);\n    document.addEventListener('pointerout', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('keyup', this, true);\n    document.addEventListener('keypress', this, true);\n    document.addEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Remove the document event listeners for the drag object.\n   */\n  private _removeListeners(): void {\n    document.removeEventListener('mousedown', this, true); // <DEPRECATED>\n    document.removeEventListener('mousemove', this, true); // <DEPRECATED>\n    document.removeEventListener('mouseup', this, true); // <DEPRECATED>\n    document.removeEventListener('mouseenter', this, true); // <DEPRECATED>\n    document.removeEventListener('mouseleave', this, true); // <DEPRECATED>\n    document.removeEventListener('mouseover', this, true); // <DEPRECATED>\n    document.removeEventListener('mouseout', this, true); // <DEPRECATED>\n    document.removeEventListener('pointerdown', this, true);\n    document.removeEventListener('pointermove', this, true);\n    document.removeEventListener('pointerup', this, true);\n    document.removeEventListener('pointerenter', this, true);\n    document.removeEventListener('pointerleave', this, true);\n    document.removeEventListener('pointerover', this, true);\n    document.removeEventListener('pointerout', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('keyup', this, true);\n    document.removeEventListener('keypress', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Update the drag scroll element under the mouse.\n   */\n  private _updateDragScroll(event: MouseEvent): void {\n    // Find the scroll target under the mouse.\n    let target = Private.findScrollTarget(event);\n\n    // Bail if there is nothing to scroll.\n    if (!this._scrollTarget && !target) {\n      return;\n    }\n\n    // Start the scroll loop if needed.\n    if (!this._scrollTarget) {\n      setTimeout(this._onScrollFrame, 500);\n    }\n\n    // Update the scroll target.\n    this._scrollTarget = target;\n  }\n\n  /**\n   * Update the current target node using the given mouse event.\n   */\n  private _updateCurrentTarget(event: MouseEvent): void {\n    // Fetch common local state.\n    let prevTarget = this._currentTarget;\n    let currTarget = this._currentTarget;\n    let prevElem = this._currentElement;\n\n    // Find the current indicated element at the given position.\n    let currElem = this.document.elementFromPoint(event.clientX, event.clientY);\n\n    // Update the current element reference.\n    this._currentElement = currElem;\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the exit\n    // event to the target.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      Private.dispatchDragExit(this, currTarget, currElem, event);\n    }\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the enter\n    // event and compute the new target element.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      currTarget = Private.dispatchDragEnter(this, currElem, currTarget, event);\n    }\n\n    // If the current target element has changed, update the current\n    // target reference and dispatch the leave event to the old target.\n    if (currTarget !== prevTarget) {\n      this._currentTarget = currTarget;\n      Private.dispatchDragLeave(this, prevTarget, currTarget, event);\n    }\n\n    // Dispatch the drag over event and update the drop action.\n    let action = Private.dispatchDragOver(this, currTarget, event);\n    this._setDropAction(action);\n  }\n\n  /**\n   * Attach the drag image element at the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _attachDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    this.dragImage.classList.add('lm-mod-drag-image');\n    /* <DEPRECATED> */\n    this.dragImage.classList.add('p-mod-drag-image');\n    /* </DEPRECATED> */\n    let style = this.dragImage.style;\n    style.pointerEvents = 'none';\n    style.position = 'fixed';\n    style.top = `${clientY}px`;\n    style.left = `${clientX}px`;\n    const body =\n      this.document instanceof Document\n        ? this.document.body\n        : (this.document.firstElementChild as HTMLElement);\n    body.appendChild(this.dragImage);\n  }\n\n  /**\n   * Detach the drag image element from the DOM.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _detachDragImage(): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let parent = this.dragImage.parentNode;\n    if (!parent) {\n      return;\n    }\n    parent.removeChild(this.dragImage);\n  }\n\n  /**\n   * Set the internal drop action state and update the drag cursor.\n   */\n  private _setDropAction(action: DropAction): void {\n    action = Private.validateAction(action, this.supportedActions);\n    if (this._override && this._dropAction === action) {\n      return;\n    }\n    switch (action) {\n      case 'none':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('no-drop', this.document);\n        break;\n      case 'copy':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('copy', this.document);\n        break;\n      case 'link':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('alias', this.document);\n        break;\n      case 'move':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('move', this.document);\n        break;\n    }\n  }\n\n  /**\n   * Finalize the drag operation and resolve the drag promise.\n   */\n  private _finalize(action: DropAction): void {\n    // Store the resolve function as a temp variable.\n    let resolve = this._resolve;\n\n    // Remove the document event listeners.\n    this._removeListeners();\n\n    // Detach the drag image.\n    this._detachDragImage();\n\n    // Dispose of the cursor override.\n    if (this._override) {\n      this._override.dispose();\n      this._override = null;\n    }\n\n    // Clear the mime data.\n    this.mimeData.clear();\n\n    // Clear the rest of the internal drag state.\n    this._disposed = true;\n    this._dropAction = 'none';\n    this._currentTarget = null;\n    this._currentElement = null;\n    this._scrollTarget = null;\n    this._promise = null;\n    this._resolve = null;\n\n    // Finally, resolve the promise to the given drop action.\n    if (resolve) {\n      resolve(action);\n    }\n  }\n\n  /**\n   * The scroll loop handler function.\n   */\n  private _onScrollFrame = () => {\n    // Bail early if there is no scroll target.\n    if (!this._scrollTarget) {\n      return;\n    }\n\n    // Unpack the scroll target.\n    let { element, edge, distance } = this._scrollTarget;\n\n    // Calculate the scroll delta using nonlinear acceleration.\n    let d = Private.SCROLL_EDGE_SIZE - distance;\n    let f = Math.pow(d / Private.SCROLL_EDGE_SIZE, 2);\n    let s = Math.max(1, Math.round(f * Private.SCROLL_EDGE_SIZE));\n\n    // Scroll the element in the specified direction.\n    switch (edge) {\n      case 'top':\n        element.scrollTop -= s;\n        break;\n      case 'left':\n        element.scrollLeft -= s;\n        break;\n      case 'right':\n        element.scrollLeft += s;\n        break;\n      case 'bottom':\n        element.scrollTop += s;\n        break;\n    }\n\n    // Request the next cycle of the scroll loop.\n    requestAnimationFrame(this._onScrollFrame);\n  };\n\n  private _disposed = false;\n  private _dropAction: DropAction = 'none';\n  private _override: IDisposable | null = null;\n  private _currentTarget: Element | null = null;\n  private _currentElement: Element | null = null;\n  private _promise: Promise<DropAction> | null = null;\n  private _scrollTarget: Private.IScrollTarget | null = null;\n  private _resolve: ((value: DropAction) => void) | null = null;\n}\n\n/**\n * The namespace for the `Drag` class statics.\n */\nexport namespace Drag {\n  /**\n   * An options object for initializing a `Drag` object.\n   */\n  export interface IOptions {\n    /**\n     * The root element for dragging DOM artifacts (defaults to document).\n     */\n    document?: Document | ShadowRoot;\n\n    /**\n     * The populated mime data for the drag operation.\n     */\n    mimeData: MimeData;\n\n    /**\n     * An optional drag image which follows the mouse cursor.\n     *\n     * #### Notes\n     * The drag image can be any DOM element. It is not limited to\n     * image or canvas elements as with the native drag-drop APIs.\n     *\n     * If provided, this will be positioned at the mouse cursor on each\n     * mouse move event. A CSS transform can be used to offset the node\n     * from its specified position.\n     *\n     * The drag image will automatically have the `lm-mod-drag-image`\n     * class name added.\n     *\n     * The default value is `null`.\n     */\n    dragImage?: HTMLElement;\n\n    /**\n     * The optional proposed drop action for the drag operation.\n     *\n     * #### Notes\n     * This can be provided as a hint to the drop targets as to which\n     * drop action is preferred.\n     *\n     * The default value is `'copy'`.\n     */\n    proposedAction?: DropAction;\n\n    /**\n     * The drop actions supported by the drag initiator.\n     *\n     * #### Notes\n     * A drop target must indicate that it intends to perform one of the\n     * supported actions in order to receive a drop event. However, it is\n     * not required to *actually* perform that action when handling the\n     * drop event. Therefore, the initiator must be prepared to handle\n     * any drop action performed by a drop target.\n     *\n     * The default value is `'all'`.\n     */\n    supportedActions?: SupportedActions;\n\n    /**\n     * An optional object which indicates the source of the drag.\n     *\n     * #### Notes\n     * For advanced applications, the drag initiator may wish to expose\n     * a source object to the drop targets. That object can be specified\n     * here and will be carried along with the drag events.\n     *\n     * The default value is `null`.\n     */\n    source?: any;\n  }\n\n  /**\n   * Override the cursor icon for the entire document.\n   *\n   * @param cursor - The string representing the cursor style.\n   *\n   * @returns A disposable which will clear the override when disposed.\n   *\n   * #### Notes\n   * The most recent call to `overrideCursor` takes precedence.\n   * Disposing an old override has no effect on the current override.\n   *\n   * This utility function is used by the `Drag` class to override the\n   * mouse cursor during a drag-drop operation, but it can also be used\n   * by other classes to fix the cursor icon during normal mouse drags.\n   *\n   * #### Example\n   * ```typescript\n   * import { Drag } from '@lumino/dragdrop';\n   *\n   * // Force the cursor to be 'wait' for the entire document.\n   * let override = Drag.overrideCursor('wait');\n   *\n   * // Clear the override by disposing the return value.\n   * override.dispose();\n   * ```\n   */\n  export function overrideCursor(\n    cursor: string,\n    doc: Document | ShadowRoot = document\n  ): IDisposable {\n    let id = ++overrideCursorID;\n    const body =\n      doc instanceof Document\n        ? doc.body\n        : (doc.firstElementChild as HTMLElement);\n    body.style.cursor = cursor;\n    body.classList.add('lm-mod-override-cursor');\n    /* <DEPRECATED> */\n    body.classList.add('p-mod-override-cursor');\n    /* </DEPRECATED> */\n    return new DisposableDelegate(() => {\n      if (id === overrideCursorID) {\n        body.style.cursor = '';\n        body.classList.remove('lm-mod-override-cursor');\n        /* <DEPRECATED> */\n        body.classList.remove('p-mod-override-cursor');\n        /* </DEPRECATED> */\n      }\n    });\n  }\n\n  /**\n   * The internal id for the active cursor override.\n   */\n  let overrideCursorID = 0;\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The size of a drag scroll edge, in pixels.\n   */\n  export const SCROLL_EDGE_SIZE = 20;\n\n  /**\n   * Validate the given action is one of the supported actions.\n   *\n   * Returns the given action or `'none'` if the action is unsupported.\n   */\n  export function validateAction(\n    action: DropAction,\n    supported: SupportedActions\n  ): DropAction {\n    return actionTable[action] & supportedTable[supported] ? action : 'none';\n  }\n\n  /**\n   * Create a left mouse event at the given position.\n   *\n   * @param type - The event type for the mouse event.\n   *\n   * @param clientX - The client X position.\n   *\n   * @param clientY - The client Y position.\n   *\n   * @returns A newly created and initialized mouse event.\n   */\n  export function createMouseEvent(\n    type: string,\n    clientX: number,\n    clientY: number\n  ): MouseEvent {\n    let event = document.createEvent('MouseEvent');\n    event.initMouseEvent(\n      type,\n      true,\n      true,\n      window,\n      0,\n      0,\n      0,\n      clientX,\n      clientY,\n      false,\n      false,\n      false,\n      false,\n      0,\n      null\n    );\n    return event;\n  }\n\n  /**\n   * An object which holds the scroll target data.\n   */\n  export interface IScrollTarget {\n    /**\n     * The element to be scrolled.\n     */\n    element: Element;\n\n    /**\n     * The scroll edge underneath the mouse.\n     */\n    edge: 'top' | 'left' | 'right' | 'bottom';\n\n    /**\n     * The distance from the mouse to the scroll edge.\n     */\n    distance: number;\n  }\n\n  /**\n   * Find the drag scroll target under the mouse, if any.\n   */\n  export function findScrollTarget(event: MouseEvent): IScrollTarget | null {\n    // Look up the client mouse position.\n    let x = event.clientX;\n    let y = event.clientY;\n\n    // Get the element under the mouse.\n    let element: Element | null = document.elementFromPoint(x, y);\n\n    // Search for a scrollable target based on the mouse position.\n    // The null assert in third clause of for-loop is required due to:\n    // https://github.com/Microsoft/TypeScript/issues/14143\n    for (; element; element = element!.parentElement) {\n      // Ignore elements which are not marked as scrollable.\n      let scrollable = element.hasAttribute('data-lm-dragscroll');\n      /* <DEPRECATED> */\n      scrollable = scrollable || element.hasAttribute('data-p-dragscroll');\n      /* </DEPRECATED> */\n      if (!scrollable) {\n        continue;\n      }\n\n      // Set up the coordinate offsets for the element.\n      let offsetX = 0;\n      let offsetY = 0;\n      if (element === document.body) {\n        offsetX = window.pageXOffset;\n        offsetY = window.pageYOffset;\n      }\n\n      // Get the element bounds in viewport coordinates.\n      let r = element.getBoundingClientRect();\n      let top = r.top + offsetY;\n      let left = r.left + offsetX;\n      let right = left + r.width;\n      let bottom = top + r.height;\n\n      // Skip the element if it's not under the mouse.\n      if (x < left || x >= right || y < top || y >= bottom) {\n        continue;\n      }\n\n      // Compute the distance to each edge.\n      let dl = x - left + 1;\n      let dt = y - top + 1;\n      let dr = right - x;\n      let db = bottom - y;\n\n      // Find the smallest of the edge distances.\n      let distance = Math.min(dl, dt, dr, db);\n\n      // Skip the element if the mouse is not within a scroll edge.\n      if (distance > SCROLL_EDGE_SIZE) {\n        continue;\n      }\n\n      // Set up the edge result variable.\n      let edge: 'top' | 'left' | 'right' | 'bottom';\n\n      // Find the edge for the computed distance.\n      switch (distance) {\n        case db:\n          edge = 'bottom';\n          break;\n        case dt:\n          edge = 'top';\n          break;\n        case dr:\n          edge = 'right';\n          break;\n        case dl:\n          edge = 'left';\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Compute how much the element can scroll in width and height.\n      let dsw = element.scrollWidth - element.clientWidth;\n      let dsh = element.scrollHeight - element.clientHeight;\n\n      // Determine if the element should be scrolled for the edge.\n      let shouldScroll: boolean;\n      switch (edge) {\n        case 'top':\n          shouldScroll = dsh > 0 && element.scrollTop > 0;\n          break;\n        case 'left':\n          shouldScroll = dsw > 0 && element.scrollLeft > 0;\n          break;\n        case 'right':\n          shouldScroll = dsw > 0 && element.scrollLeft < dsw;\n          break;\n        case 'bottom':\n          shouldScroll = dsh > 0 && element.scrollTop < dsh;\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Skip the element if it should not be scrolled.\n      if (!shouldScroll) {\n        continue;\n      }\n\n      // Return the drag scroll target.\n      return { element, edge, distance };\n    }\n\n    // No drag scroll target was found.\n    return null;\n  }\n\n  /**\n   * Dispatch a drag enter event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currElem - The currently indicated element, or `null`. This\n   *   is the \"immediate user selection\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The element to use as the current drag target. This is the\n   *   \"current target element\" from the whatwg spec, and may be `null`.\n   *\n   * #### Notes\n   * This largely implements the drag enter portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragEnter(\n    drag: Drag,\n    currElem: Element | null,\n    currTarget: Element | null,\n    event: MouseEvent\n  ): Element | null {\n    // If the current element is null, return null as the new target.\n    if (!currElem) {\n      return null;\n    }\n\n    // Dispatch a drag enter event to the current element.\n    let dragEvent = createDragEvent('lm-dragenter', drag, event, currTarget);\n    let canceled = !currElem.dispatchEvent(dragEvent);\n\n    // If the event was canceled, use the current element as the new target.\n    if (canceled) {\n      return currElem;\n    }\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\n    canceled = !currElem.dispatchEvent(dragEvent);\n    if (canceled) {\n      return currElem;\n    }\n    /* </DEPRECATED> */\n\n    // If the current element is the document body, keep the original target.\n    const body =\n      drag.document instanceof Document\n        ? drag.document.body\n        : (drag.document.firstElementChild as HTMLElement);\n\n    if (currElem === body) {\n      return currTarget;\n    }\n\n    // Dispatch a drag enter event on the document body.\n    dragEvent = createDragEvent('lm-dragenter', drag, event, currTarget);\n    body.dispatchEvent(dragEvent);\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\n    body.dispatchEvent(dragEvent);\n    /* </DEPRECATED> */\n\n    // Ignore the event cancellation, and use the body as the new target.\n    return body;\n  }\n\n  /**\n   * Dispatch a drag exit event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag exit portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragExit(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: MouseEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag exit event to the previous target.\n    let dragEvent = createDragEvent('lm-dragexit', drag, event, currTarget);\n    prevTarget.dispatchEvent(dragEvent);\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-dragexit', drag, event, currTarget);\n    prevTarget.dispatchEvent(dragEvent);\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispatch a drag leave event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag leave portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragLeave(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: MouseEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag leave event to the previous target.\n    let dragEvent = createDragEvent('lm-dragleave', drag, event, currTarget);\n    prevTarget.dispatchEvent(dragEvent);\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-dragleave', drag, event, currTarget);\n    prevTarget.dispatchEvent(dragEvent);\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispatch a drag over event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drag over event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragOver(\n    drag: Drag,\n    currTarget: Element | null,\n    event: MouseEvent\n  ): DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drag over event to the current target.\n    let dragEvent = createDragEvent('lm-dragover', drag, event, null);\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-dragover', drag, event, null);\n    canceled = !currTarget.dispatchEvent(dragEvent);\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n    /* </DEPRECATED> */\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * Dispatch a drop event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drop event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDrop(\n    drag: Drag,\n    currTarget: Element | null,\n    event: MouseEvent\n  ): DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drop event to the current target.\n    let dragEvent = createDragEvent('lm-drop', drag, event, null);\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    /* <DEPRECATED> */\n    dragEvent = createDragEvent('p-drop', drag, event, null);\n    canceled = !currTarget.dispatchEvent(dragEvent);\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n    /* </DEPRECATED> */\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * A lookup table from drop action to bit value.\n   */\n  const actionTable: { [key: string]: number } = {\n    none: 0x0,\n    copy: 0x1,\n    link: 0x2,\n    move: 0x4\n  };\n\n  /**\n   * A lookup table from supported action to drop action bit mask.\n   */\n  const supportedTable: { [key: string]: number } = {\n    none: actionTable['none'],\n    copy: actionTable['copy'],\n    link: actionTable['link'],\n    move: actionTable['move'],\n    'copy-link': actionTable['copy'] | actionTable['link'],\n    'copy-move': actionTable['copy'] | actionTable['move'],\n    'link-move': actionTable['link'] | actionTable['move'],\n    all: actionTable['copy'] | actionTable['link'] | actionTable['move']\n  };\n\n  /**\n   * Create a new initialized `IDragEvent` from the given data.\n   *\n   * @param type - The event type for the drag event.\n   *\n   * @param drag - The drag object to use for seeding the drag data.\n   *\n   * @param event - The mouse event to use for seeding the mouse data.\n   *\n   * @param related - The related target for the event, or `null`.\n   *\n   * @returns A new object which implements `IDragEvent`.\n   */\n  function createDragEvent(\n    type: string,\n    drag: Drag,\n    event: MouseEvent,\n    related: Element | null\n  ): IDragEvent {\n    // Create a new mouse event to use as the drag event. Currently,\n    // JS engines do now allow user-defined Event subclasses.\n    let dragEvent = document.createEvent('MouseEvent');\n\n    // Initialize the mouse event data.\n    dragEvent.initMouseEvent(\n      type,\n      true,\n      true,\n      window,\n      0,\n      event.screenX,\n      event.screenY,\n      event.clientX,\n      event.clientY,\n      event.ctrlKey,\n      event.altKey,\n      event.shiftKey,\n      event.metaKey,\n      event.button,\n      related\n    );\n\n    // Forcefully add the custom drag event properties.\n    (dragEvent as any).dropAction = 'none';\n    (dragEvent as any).mimeData = drag.mimeData;\n    (dragEvent as any).proposedAction = drag.proposedAction;\n    (dragEvent as any).supportedActions = drag.supportedActions;\n    (dragEvent as any).source = drag.source;\n\n    // Return the fully initialized drag event.\n    return dragEvent as IDragEvent;\n  }\n}\n"],"names":["Private","options","_onScrollFrame","_scrollTarget","element","edge","distance","d","SCROLL_EDGE_SIZE","f","Math","pow","s","max","round","scrollTop","scrollLeft","requestAnimationFrame","_disposed","_dropAction","_override","_currentTarget","_currentElement","_promise","_resolve","this","document","mimeData","dragImage","proposedAction","supportedActions","source","dispose","createMouseEvent","dispatchDragLeave","_finalize","start","clientX","clientY","Promise","resolve","_addListeners","_attachDragImage","reject","event","dispatchEvent","handleEvent","type","_evtMouseMove","_evtMouseUp","_evtKeyDown","preventDefault","stopPropagation","moveDragImage","style","top","left","_updateCurrentTarget","_updateDragScroll","button","action","dispatchDrop","keyCode","addEventListener","_removeListeners","removeEventListener","target","findScrollTarget","setTimeout","prevTarget","currTarget","prevElem","currElem","elementFromPoint","dispatchDragExit","dispatchDragEnter","dispatchDragOver","_setDropAction","classList","add","pointerEvents","position","Document","body","firstElementChild","appendChild","_detachDragImage","parent","parentNode","removeChild","validateAction","Drag","overrideCursor","clear","cursor","doc","id","overrideCursorID","DisposableDelegate","remove","supported","actionTable","supportedTable","createEvent","initMouseEvent","window","x","y","parentElement","scrollable","hasAttribute","offsetX","offsetY","pageXOffset","pageYOffset","r","getBoundingClientRect","right","width","bottom","height","dl","dt","dr","db","min","dsw","scrollWidth","clientWidth","dsh","scrollHeight","clientHeight","shouldScroll","drag","dragEvent","createDragEvent","canceled","dropAction","none","copy","link","move","all","related","screenX","screenY","ctrlKey","altKey","shiftKey","metaKey"],"sourceRoot":""}