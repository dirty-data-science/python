{"version":3,"file":"816.c8050f2.js","mappings":"2MAYO,MAAMA,EAAb,cA2CU,KAAAC,YAAc,EACxB,CAtCEC,UAAUC,GACR,MAAMC,EAAS,EAAAC,OAAA,KACb,EAAAC,WAAA,aACA,oBAAoBH,UAEtB,IACE,MAAMI,QAAiBC,MAAMJ,GACvBK,EAAOC,KAAKC,YAAYJ,EAASK,QACvC,GAnBM,QAmBFC,KAAKZ,aAnBH,QAmB0BE,EAAgB,CAK9C,MAAMW,EAAOD,KAAKZ,YAClBQ,EAAKM,KAAKD,GAAME,YAAcP,EAAKM,KAAKD,GAAMG,WACjC,OAATH,IACFL,EAAKM,KAAS,GAAEC,YAAc,GAAGP,EAAKM,KAAS,GAAEE,uB,CAIrD,OADAJ,KAAKZ,YAAcE,EACZM,C,CACP,MAAOS,GACP,OAAIf,EACK,CACLY,KAAM,CAAC,EACPI,QAAS,kBAAkBhB,qBAGxB,CACLY,KAAM,CACJK,GAAI,CAAEJ,YAAa,UAAWC,WAAY,YAE5CE,QAAS,G,CAGf,EChDK,MAAME,EAAe,I,SAAIC,OAC9B,wC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/src/translation.ts","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/translation/src/tokens.ts"],"sourcesContent":["import { PageConfig, URLExt } from '@jupyterlab/coreutils';\n\nimport { JSONObject } from '@lumino/coreutils';\n\n/**\n * A fake locale to retrieve all the language packs.\n */\nconst ALL = 'all';\n\n/**\n * A class to handle requests to /api/translations\n */\nexport class Translation {\n  /**\n   * Get the translation data for the given locale\n   * @param locale The locale\n   * @returns\n   */\n  async get(locale: string): Promise<JSONObject> {\n    const apiURL = URLExt.join(\n      PageConfig.getBaseUrl(),\n      `api/translations/${locale}.json`\n    );\n    try {\n      const response = await fetch(apiURL);\n      const json = JSON.parse(await response.text());\n      if (this._prevLocale !== ALL && locale === ALL) {\n        // TODO: fix this logic upstream?\n        // the upstream translation plugin relies on the comparison between\n        // the display name and the native name to enable or disable the commands:\n        // https://github.com/jupyterlab/jupyterlab/blob/befa831ffef36321b87f352a48fbe2439df6c872/packages/translation-extension/src/index.ts#L117\n        const prev = this._prevLocale;\n        json.data[prev].displayName = json.data[prev].nativeName;\n        if (prev !== 'en') {\n          json.data['en'].displayName = `${json.data['en'].nativeName} (default)`;\n        }\n      }\n      this._prevLocale = locale;\n      return json;\n    } catch (e) {\n      if (locale) {\n        return {\n          data: {},\n          message: `Language pack '${locale}' not installed!`,\n        };\n      }\n      return {\n        data: {\n          en: { displayName: 'English', nativeName: 'English' },\n        },\n        message: '',\n      };\n    }\n  }\n\n  private _prevLocale = '';\n}\n","import { JSONObject, Token } from '@lumino/coreutils';\n\n/**\n * The token for the settings service.\n */\nexport const ITranslation = new Token<ITranslation>(\n  '@jupyterlite/translation:ITranslation'\n);\n\n/**\n * The interface for the Translation service.\n */\nexport interface ITranslation {\n  /**\n   * Get the translation data for a given locale\n   *\n   * @param locale the locale\n   *\n   */\n  get(locale: string): Promise<JSONObject>;\n}\n"],"names":["Translation","_prevLocale","async","locale","apiURL","URLExt","PageConfig","response","fetch","json","JSON","parse","text","this","prev","data","displayName","nativeName","e","message","en","ITranslation","Token"],"sourceRoot":""}